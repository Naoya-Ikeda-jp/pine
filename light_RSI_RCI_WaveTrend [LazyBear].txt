// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ? ace_fantasista

//@version=5
indicator(title="OR_RSI+MACD+StocRSI_Relative Strength Index+RCI3lines", shorttitle="RSI+MACD+StocRSI+RCI3lines", format=format.price, precision=2, timeframe="", timeframe_gaps=true)

//rsi***************************************************************************
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(4, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)
isBB = maTypeInput == "Bollinger Bands"

plot(rsi, "RSI", color=#7E57C2,linewidth=2)
plot(rsiMA, "RSI-based MA", color=color.yellow,linewidth=2)
rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Upper Bollinger Band", color=color.green)
bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Lower Bollinger Band", color=color.green)
fill(bbUpperBand, bbLowerBand, color= isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")


//rci3***************************************************************************
src = input(title="Source", defval=close)
//
// @author Jadbrother modified by gero
//
//@version=2
//study(title = "RCI3lines", shorttitle = "RCI3lines")

itvs = input(20, "short interval")
itvm = input(25, "middle interval")
itvl = input(30, "long interval")
//src = input(close, "source")
upperband=input(title="High line[%]",defval=95)
lowerband=input(title="Low line[%]",defval=-95)

ord(seq, idx, itv) =>
    p = seq[idx]
    o = 1
    s = 0
    for i = 0 to itv - 1
        if p < seq[i]
            o := o + 1
        else
            if p == seq[i]
                s := s+1
                o+(s-1)/2.0
    o

d(itv) =>
    sum = 0.0
    for i = 0 to itv - 1
        sum := sum + math.pow((i + 1) - ord(src, i, itv), 2)
    sum

rci(itv) => (1.0 - 6.0 * d(itv) / (itv * (itv * itv - 1.0))) * 100.0

hline(upperband,color=#888888)
hline(lowerband,color=#888888)
plot(rci(itvs), title = "RCI short", color = #FF6D00)
plot(rci(itvm), title = "RCI middle", color = #2962FF)
plot(rci(itvl), title = "RCI long", color = #00FF00)


//
// @author LazyBear
//
// If you use this code in its original/modified form, do drop me a note. 
//
//study(title="RSI_RCI_WaveTrend [LazyBear]", shorttitle="WT_LB_RSCI", format=format.price, precision=2, timeframe="", timeframe_gaps=true)
n1 = input(20, "Channel Length")
n2 = input(30, "Average Length")
obLevel1 = input(120, "Over Bought Level 1")
obLevel2 = input(100, "Over Bought Level 2")
osLevel1 = input(-120, "Over Sold Level 1")
osLevel2 = input(-100, "Over Sold Level 2")
 
ap = hlc3 
esa = ta.ema(ap, n1)
d2 = ta.ema(math.abs(ap - esa), n1)
ci = (ap - esa) / (0.015 * d2)
tci = ta.ema(ci, n2)
 
wt1 = tci
wt2 = ta.sma(wt1,4)

plot(0, color=color.gray)
plot(obLevel1, color=color.red)
plot(osLevel1, color=color.green)
plot(obLevel2, color=color.red, style=plot.style_cross)
plot(osLevel2, color=color.green, style=plot.style_cross)

plot(wt1, color=color.green, style=plot.style_cross)
plot(wt2, color=color.red)
plot(wt1-wt2, color=color.blue, style=plot.style_area)

// RSIのアラート条件
rsiOverboughtLevel = input.int(80, title="RSI Overbought Level", group="RSI Settings")
rsiOversoldLevel = input.int(30, title="RSI Oversold Level", group="RSI Settings")
rsiOverboughtCondition = ta.crossover(rsi, rsiOverboughtLevel)
rsiOversoldCondition = ta.crossunder(rsi, rsiOversoldLevel)

// アラートとアイコンの表示
plotshape(series=rsiOverboughtCondition, location=location.top, color=color.orange, style=shape.labelup, text="RSI OB")
plotshape(series=rsiOversoldCondition, location=location.bottom, color=color.blue, style=shape.labeldown, text="RSI OS")

// WaveTrendのアラート条件
wtOverboughtLevel = input.int(100, title="WaveTrend Overbought Level", group="WaveTrend Settings")
wtOversoldLevel = input.int(-100, title="WaveTrend Oversold Level", group="WaveTrend Settings")
wtOverboughtCondition = ta.crossover(wt1, wtOverboughtLevel)
wtOversoldCondition = ta.crossunder(wt1, wtOversoldLevel)

// アラートとアイコンの表示
plotshape(series=wtOverboughtCondition, location=location.top, color=color.red, style=shape.labelup, text="WT OB")
plotshape(series=wtOversoldCondition, location=location.bottom,  color=color.green, style=shape.labeldown, text="WT OS")

// アラート設定
alertcondition(rsiOverboughtCondition, title="RSI Overbought", message="RSI has crossed above the overbought level")
alertcondition(rsiOversoldCondition, title="RSI Oversold", message="RSI has crossed below the oversold level")
alertcondition(wtOverboughtCondition, title="WaveTrend Overbought", message="WaveTrend has crossed above the overbought level")
alertcondition(wtOversoldCondition, title="WaveTrend Oversold", message="WaveTrend has crossed below the oversold level")

// RCIのアラート条件
rciShortOverboughtCondition = ta.crossover(rci(itvs), upperband)
rciShortOversoldCondition = ta.crossunder(rci(itvs), lowerband)
rciMiddleOverboughtCondition = ta.crossover(rci(itvm), upperband)
rciMiddleOversoldCondition = ta.crossunder(rci(itvm), lowerband)
rciLongOverboughtCondition = ta.crossover(rci(itvl), upperband)
rciLongOversoldCondition = ta.crossunder(rci(itvl), lowerband)

// アラートとアイコンの表示
plotshape(series=rciShortOverboughtCondition, location=location.top, color=color.red, style=shape.labelup, text="RCI Short OB")
plotshape(series=rciShortOversoldCondition, location=location.bottom, color=color.green, style=shape.labeldown, text="RCI Short OS")
plotshape(series=rciMiddleOverboughtCondition, location=location.top, color=color.red, style=shape.labelup, text="RCI Middle OB")
plotshape(series=rciMiddleOversoldCondition, location=location.bottom, color=color.green, style=shape.labeldown, text="RCI Middle OS")
plotshape(series=rciLongOverboughtCondition, location=location.top, color=color.red, style=shape.labelup, text="RCI Long OB")
plotshape(series=rciLongOversoldCondition, location=location.bottom, color=color.green, style=shape.labeldown, text="RCI Long OS")
